class TestEdgeCases:
    """–¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤."""

    def test_empty_task_name(self, client, auth_headers):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –ø—É—Å—Ç—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º."""
        task_data = {"name": "", "text": "Valid description"}

        client.post.return_value.status_code = 422
        client.post.return_value.json.return_value = {
            "detail": [{"loc": ["body", "name"], "msg": "field required"}]
        }

        response = client.post("/tasks/", json=task_data, headers=auth_headers)
        assert response.status_code == 422

    def test_maximum_length_values(self, client, auth_headers):
        """–¢–µ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."""
        task_data = {
            "name": "x" * 30,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è name
            "text": "y" * 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è text
        }

        client.post.return_value.status_code = 201
        client.post.return_value.json.return_value = {"id": 1, **task_data}

        response = client.post("/tasks/", json=task_data, headers=auth_headers)
        assert response.status_code == 201

    def test_unicode_support(self, client, auth_headers):
        """–¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Unicode —Å–∏–º–≤–æ–ª–æ–≤."""
        unicode_task = {
            "name": "–ó–∞–¥–∞—á–∞ —Å —ç–º–æ–¥–∑–∏ üòÄüöÄ",
            "text": "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å —Å–∏–º–≤–æ–ª–∞–º–∏: √±√°√©√≠√≥√∫"
        }

        client.post.return_value.status_code = 201
        client.post.return_value.json.return_value = {"id": 1, **unicode_task}

        response = client.post(
            "/tasks/", json=unicode_task, headers=auth_headers)
        assert response.status_code == 201
        assert response.json()["name"] == unicode_task["name"]

    def test_null_values_handling(self, client, auth_headers):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ null –∑–Ω–∞—á–µ–Ω–∏–π."""
        task_data = {"name": None, "text": None}

        client.post.return_value.status_code = 201
        client.post.return_value.json.return_value = {
            "id": 1, "name": None, "text": None}

        response = client.post("/tasks/", json=task_data, headers=auth_headers)
        assert response.status_code == 201

    def test_very_large_file_upload(self, client, auth_headers):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞."""
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º 20MB (–±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞)
        large_file_content = b"x" * (20 * 1024 * 1024)
        files = {"uploaded_file": (
            "large_file.txt", large_file_content, "text/plain")}

        client.post.return_value.status_code = 413  # Payload too large
        client.post.return_value.json.return_value = {
            "detail": "File too large"}

        response = client.post(
            "/tasks/1/file", files=files, headers=auth_headers)
        assert response.status_code == 413
